# -*- python -*-
# ex: set filetype=python:
#
# Copyright 2018 The Kythe Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from os import path

from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.plugins import *
from twisted.internet import defer

c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("local-worker", "@secret{worker_password}"),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# List of Pull Request authors that automatically trigger builds
autoBuildUsers = [
    'creachadair',
    'danielmoy-google',
    'jrtom',
    'salguarnieri',
    'schroederc',
    'shahms',
    'zrlk',
]
def pullRequestFilter(req):
  if req['user']['login'] in autoBuildUsers:
    return True
  for label in req['labels']:
    if label['name'] == 'buildbot':
      return True
  return False

c['change_source'] = []
# Track github.com/google/kythe master
c['change_source'].append(changes.GitPoller(
    'git://github.com/google/kythe.git',
    workdir='kythe-workdir', branches=['master'],
    category=None, pollAtLaunch=True, pollInterval=300))
# Track github.com/google/kythe pull requests
c['change_source'].append(GitHubPullrequestPoller(
    owner='google', repo='kythe',
    pullrequest_filter=pullRequestFilter,
    repository_type='git', category='pull', magic_link=True,
    pollAtLaunch=True, pollInterval=60,
    token='@secret{github_token}'))

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="master",
    change_filter=util.ChangeFilter(category=None, branch='master'),
    builderNames=["bazel-0.16.0", "bazel-0.16.1", "bazel-opt", "go-1.10.3"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="pull-requests",
    change_filter=util.ChangeFilter(category='pull'),
    builderNames=["bazel-0.16.0", "bazel-0.16.1", "bazel-opt", "go-1.10.3"]))

# Allow builders to be "forced"
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["bazel-0.16.0", "bazel-0.16.1", "bazel-opt", "go-1.10.3"]))

####### BUILDERS

bazelKytheSteps = util.BuildFactory()
bazelKytheSteps.addStep(steps.GitHub(repourl=util.Property('repository', 'git://github.com/google/kythe.git'),
				     mode='incremental'))
bazelBinEnv = {'DEFAULT_BAZEL': '/bin/false', 'BAZEL_VERSION': util.Property('bazel_version')}
bazelKytheSteps.addStep(steps.ShellCommand(
    command=["cache-llvm.sh", "--update"],
    env=bazelBinEnv,
    haltOnFailure=True))
bazelKytheSteps.addStep(steps.ShellCommand(
    command=["bazel", "test", util.Property('bazel_flags', default=[]), "-k", "//..."],
    env=bazelBinEnv))

# TODO(schroederc): build as a Go 1.11+ module
goKytheSteps = util.BuildFactory()
goKytheSteps.addStep(steps.GitHub(repourl=util.Property('repository', 'git://github.com/google/kythe.git'),
				  workdir='src/kythe.io',
				  mode='incremental'))
goKytheSteps.addStep(steps.ShellCommand(command=["go", "get", "-t", "kythe.io/kythe/go/..."],
                                        env={"GOPATH": util.Property('builddir')},
                                        haltOnFailure=True))
goKytheSteps.addStep(steps.ShellCommand(command=["go", "test", "kythe.io/kythe/go/..."],
                                        env={"GOPATH": util.Property('builddir')}))

build_lock = util.WorkerLock("worker_builds", maxCountForWorker={'local-worker': 1})

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="bazel-0.16.0",
        workernames=["local-worker"],
        properties={'bazel_version': '0.16.0'},
        locks=[build_lock.access('exclusive')],
        factory=bazelKytheSteps))
c['builders'].append(
    util.BuilderConfig(
        name="bazel-0.16.1",
        workernames=["local-worker"],
        properties={'bazel_version': '0.16.1'},
        locks=[build_lock.access('exclusive')],
        factory=bazelKytheSteps))
c['builders'].append(
    util.BuilderConfig(
        name="bazel-opt",
        workernames=["local-worker"],
        properties={'bazel_version': '0.16.1', 'bazel_flags': ['-c', 'opt']},
        locks=[build_lock.access('exclusive')],
        factory=bazelKytheSteps))
c['builders'].append(
  util.BuilderConfig(
      name="go-1.10.3",
      workernames=["local-worker"],
      locks=[build_lock.access('counting')],
      factory=goKytheSteps))

####### BUILDBOT SERVICES

@util.renderer
@defer.inlineCallbacks
def renderBuildState(props):
  build = yield props.master.data.get(('builders', props.getProperty('buildername'),
                                       'builds', props.getProperty('buildnumber')))
  defer.returnValue(build['state_string'].capitalize())

# Push GitHub status messages for every build start/end.
c['services'] = []
c['services'].append(reporters.GitHubStatusPush(token='@secret{github_token}',
                                                startDescription=renderBuildState,
                                                endDescription=renderBuildState))

####### PROJECT IDENTITY

c['title'] = "Kythe CI"
c['titleURL'] = "https://buildbot-dot-kythe-repo.appspot.com/"
c['buildbotURL'] = "https://buildbot-dot-kythe-repo.appspot.com/"
c['www'] = {
    'port': 8080, # AppEngine web port
    'plugins': dict(waterfall_view={}, console_view={}, grid_view={}),
    'auth': util.GitHubAuth("@secret{github_auth_id}", "@secret{github_auth_secret}"),
    'authz': util.Authz(
	# restrict control access to users in the 'google' org
	allowRules=[util.AnyControlEndpointMatcher(role="google")],
	roleMatchers=[util.RolesFromGroups()]
    ),
}

####### DB URL

c['db'] = {
    'db_url': "postgresql+psycopg2://@secret{db_userpass}@/buildbot?host=@secret{db_host}",
}
